------------------------------------------------------------------------------------------------------------------------
-- Banco de Dados Passagem (10-03-2022).
-- Script para PostgreSQL
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
--- Linguage SQL --------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------

CREATE TABLE LOCALIDADE (
   ID_LOCAL SERIAL NOT NULL
   PRIMARY KEY,
   NOME_LOCAL VARCHAR(40) 
   NOT NULL
);

INSERT INTO LOCALIDADE (NOME_LOCAL)
VALUES ('VITÓRIA'),('GUARAPARI'),('VILA VELHA'),
('VIANA'),('CARIACICA'),('SERRA'),('DOMINGOS MARTINS'),
('FUNDÃO'),('IBIRAÇU'),('JOÃO NEIVA'),('ARACRUZ'),
('COLATINA'),('LINHARES'),('BAIXO GUANDU'),('MARILÂNDIA'),
('BAUNILHA'),('PENDANGA'),('ACIOLI'),('BARRA DO TRIUNFO'),
('SANTA TERESA'),('SÃO ROQUE DO CANAÃ'),('NOVA ALMEIDA');

CREATE INDEX INDICE_NOME_LOCAL 
ON LOCALIDADE
USING BTREE (NOME_LOCAL);

CREATE TABLE CLASSE (
   ID_CLASSE SERIAL NOT NULL PRIMARY KEY,
   NOME_CLASSE VARCHAR(20) NOT NULL
);

INSERT INTO CLASSE (NOME_CLASSE)  VALUES ('COMERCIAL'), ('SEMI DIRETO'), ('EXECUTIVO'), ('LEITO');

CREATE TABLE LINHA (
   ID_LINHA SERIAL NOT NULL PRIMARY KEY,
   ID_LOCAL_ORIGEM INTEGER NOT NULL,
   ID_LOCAL_DESTINO INTEGER NOT NULL,
   ID_CLASSE INTEGER NOT NULL 
  REFERENCES CLASSE (ID_CLASSE) ON DELETE RESTRICT,
   NOME_LINHA VARCHAR(200) NOT NULL,
 
   FOREIGN KEY (ID_LOCAL_ORIGEM) 
   REFERENCES LOCALIDADE (ID_LOCAL) 
   ON DELETE RESTRICT,
 
   FOREIGN KEY (ID_LOCAL_DESTINO)	
   REFERENCES LOCALIDADE (ID_LOCAL)
   ON DELETE RESTRICT
);

INSERT INTO LINHA VALUES (100,1,12,1,'VITÓRIA x COLATINA');

CREATE TABLE TRECHO (
   ID_TRECHO SERIAL NOT NULL,
   ID_LINHA INTEGER NOT NULL 
      REFERENCES LINHA (ID_LINHA)	ON DELETE RESTRICT,
   ID_LOCAL INTEGER NOT NULL
      REFERENCES LOCALIDADE (ID_LOCAL) ON DELETE RESTRICT,
   KM NUMERIC(6,2) NOT NULL,
 
   PRIMARY KEY(ID_TRECHO, ID_LINHA)
);

INSERT INTO TRECHO VALUES (1,100,1,0);
INSERT INTO TRECHO VALUES (2,100,6,20);
INSERT INTO TRECHO VALUES (3,100,8,40);
INSERT INTO TRECHO VALUES (4,100,9,80);
INSERT INTO TRECHO VALUES (5,100,10,90);
INSERT INTO TRECHO VALUES (6,100,12,120);

CREATE TABLE TARIFA (
   ID_TARIFA SERIAL NOT NULL PRIMARY KEY,
   ID_CLASSE INTEGER NOT NULL
      REFERENCES CLASSE (ID_CLASSE) ON DELETE RESTRICT,
   DT_INICIO DATE NOT NULL,
   DT_FIM DATE,
   VALOR NUMERIC(9,2) NOT NULL
);

CREATE TABLE VIAGEM (
   ID_VIAGEM SERIAL NOT NULL,
   ID_LINHA INTEGER NOT NULL
      REFERENCES LINHA (ID_LINHA) ON DELETE RESTRICT,
   DT_HORA TIMESTAMP NOT NULL,
   TOTAL_LUGARES INTEGER NOT NULL,
 
   PRIMARY KEY(ID_VIAGEM)
);

CREATE TABLE PASSAGEM (
   ID_PASSAGEM SERIAL NOT NULL PRIMARY KEY,
   ID_VIAGEM INTEGER NOT NULL
      REFERENCES VIAGEM (ID_VIAGEM) ON DELETE RESTRICT,
   ID_LOCAL_EMBARQUE INTEGER NOT NULL
      REFERENCES LOCALIDADE (ID_LOCAL) ON DELETE RESTRICT,
   ID_LOCAL_DESEMBARQUE INTEGER NOT NULL
      REFERENCES LOCALIDADE (ID_LOCAL) ON DELETE RESTRICT,
   DT_HORA_COMPRA TIMESTAMP,
   PRECO DECIMAL(9,2),
   POLTRONA INTEGER,
   ID_TARIFA INTEGER 
	 REFERENCES TARIFA (ID_TARIFA) ON DELETE RESTRICT
);

------------------------------------------------------------------------------
--- Funções SQL --------------------------------------------------------------
------------------------------------------------------------------------------
---1

CREATE OR REPLACE FUNCTION EXIBE_TRECHOS(INTEGER)
RETURNS SETOF RECORD AS '
   SELECT T.ID_TRECHO, T.ID_LOCAL, L.NOME_LOCAL, T.KM, T.ID_LINHA
   FROM TRECHO T, LOCALIDADE L
   WHERE T.ID_LOCAL = L.ID_LOCAL
   AND T.ID_LINHA = $1;
'
LANGUAGE SQL;


SELECT * FROM EXIBE_TRECHOS(100) AS (ID_TRECHO INTEGER, ID_LOCAL INTEGER, 
				     NOME_LOCAL VARCHAR(40), KM NUMERIC(6,2),
				     ID_LINHA INTEGER);


---------------------------------------------------------------------------------
---2

INSERT INTO VIAGEM VALUES (1,100,'2022-03-14',10);
INSERT INTO VIAGEM VALUES (2,100,'2022-03-14 10:00',10);

INSERT INTO TARIFA VALUES (1,1,'2022-02-28', NULL,2);

INSERT INTO PASSAGEM VALUES (1,1,1,12,'2022-03-14',NULL,1,1);
INSERT INTO PASSAGEM VALUES (2,1,1,12,'2022-03-14',NULL,2,1),
   (3,1,1,12,'2022-03-14',NULL,3,1),(4,1,1,12,'2022-03-14',NULL,4,1),
   (5,1,1,12,'2022-03-14',NULL,5,1),(6,1,1,12,'2022-03-14',NULL,6,1),
   (7,1,1,12,'2022-03-14',NULL,7,1),(8,1,1,12,'2022-03-14',NULL,8,1),
   (9,1,1,12,'2022-03-14',NULL,9,1), (10,1,1,12,'2022-03-14',NULL,10,1);

INSERT INTO PASSAGEM VALUES (11,2,1,12,'2022-03-14',NULL,1,1);
INSERT INTO PASSAGEM VALUES (12,2,1,12,'2022-03-14',NULL,2,1),
   (13,2,1,12,'2022-03-14',NULL,3,1),(14,2,1,12,'2022-03-14',NULL,4,1),
   (15,2,1,12,'2022-03-14',NULL,5,1),(16,2,1,12,'2022-03-14',NULL,6,1),
   (17,2,1,12,'2022-03-14',NULL,7,1),(18,2,1,12,'2022-03-14',NULL,8,1),
   (19,2,1,12,'2022-03-14',NULL,9,1), (20,2,1,12,'2022-03-14',NULL,10,1);


CREATE OR REPLACE FUNCTION EXIBE_POLTRONAS_DISPONIVEIS(INTEGER)
RETURNS SETOF RECORD AS '
   SELECT POLTRONA FROM PASSAGEM WHERE ID_VIAGEM = $1;
'
LANGUAGE SQL;

SELECT * FROM EXIBE_POLTRONAS_DISPONIVEIS(1) AS (POLTRONA INTEGER);



---------------------------------------------------------------------------------
--3
CREATE OR REPLACE FUNCTION CRIA_VIAGEM(INTEGER, TIMESTAMP, INTEGER)
RETURNS VARCHAR AS $$
   INSERT INTO VIAGEM (ID_LINHA, DT_HORA, TOTAL_LUGARES) VALUES
   ($1, $2, $3);
   
   SELECT 'OK' AS RESPOSTA;
$$
LANGUAGE SQL;

SELECT * FROM CRIA_VIAGEM(100,'2022-03-25 11:15',5);

SELECT * FROM VIAGEM;

-----------------------------------------------------------------------------------
--4

CREATE OR REPLACE FUNCTION LISTA_VIAGENS_DE_LINHA(INTEGER)
RETURNS RECORD AS $$
   SELECT V.ID_VIAGEM, V.ID_LINHA, LI.NOME_LINHA, LI.ID_LOCAL_ORIGEM, LO.NOME_LOCAL AS ORIGEM,
          LI.ID_LOCAL_DESTINO, LO.NOME_LOCAL AS DESTINO, V.DT_HORA
   FROM VIAGEM V, LINHA LI, LOCALIDADE LO
   WHERE V.ID_LINHA = LI.ID_LINHA
   AND LI.ID_LOCAL_ORIGEM = LO.ID_LOCAL
   AND LI.ID_LOCAL_DESTINO = LO.ID_LOCAL
   AND EXTRACT(DAY from AGE(NOW(), V.DT_HORA)) <= 0
   AND V.ID_LINHA = $1;
$$
LANGUAGE SQL;

SELECT * FROM LISTA_VIAGENS_DE_LINHA(100) AS (ID_VIAGEM INTEGER, ID_LINHA INTEGER, NOME_LINHA VARCHAR(200), 
									           ID_LOCAL_ORIGEM INTEGER, NOME_LOCAL VARCHAR(40),
									           ID_LOCAL_DESTINO INTEGER, DESTINO VARCHAR(40),
									           DT_HORA TIMESTAMP);
											   
SELECT ID_VIAGEM, ID_LINHA, DT_HORA, AGE(NOW(), DT_HORA) AS INTERVALO FROM VIAGEM;	


SELECT ID_VIAGEM, ID_LINHA, DT_HORA, extract(day from AGE(NOW(), DT_HORA)) AS INTERVALO FROM VIAGEM;		

-------------------------------------------------------------------------------------------------------------
--- Linguagem PLPGSQL ----------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION INSERE_LOCALIDADE(PARAM VARCHAR(40))
RETURNS INT AS $$
DECLARE
   NOME ALIAS FOR $1;
   TOTAL INTEGER;
   IDENTIFICADOR INTEGER;
BEGIN
   -- VERIFICA A EXISTÊNCIA PRÉVIA DO REGISTRO A SER INSERIDO: 
   -- JÁ EXISTE UMA LOCALIDADE COM O NOME A SER INSERIDO?
   
   SELECT COUNT(*) INTO TOTAL FROM LOCALIDADE
   WHERE NOME_LOCAL = NOME;

   IF (TOTAL = 0)
   THEN INSERT INTO LOCALIDADE (NOME_LOCAL) VALUES (NOME) RETURNING ID_LOCAL INTO IDENTIFICADOR;
   ELSE IDENTIFICADOR = -1;
   END IF;
   
   RETURN IDENTIFICADOR;
   
END;
$$ LANGUAGE PLPGSQL;
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
   
SELECT INSERE_LOCALIDADE('PRAINHA');
   
SELECT * FROM LOCALIDADE;   